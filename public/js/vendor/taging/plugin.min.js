tinymce.PluginManager.add('taging', function (editor, url) {

    var tags = [
        "BUSINESS_NAME",
        "BUSINESS_PHONE",
        "BUSINESS_URL",
        "OWNER_NAME",
        "OWNER_FIRST_NAME",
        "OWNER_LAST_NAME",
        "OWNER_EMAIL",
        "CUSTOMER_NAME",
        "CUSTOMER_FIRST_NAME",
        "CUSTOMER_LAST_NAME",
        "PROVIDE_FEEDBACK",
        "REQUEST_FEEDBACK",
        "REVIEW_LINKS"
    ];

    var availableTags = tags

    function getHtml() {
        var emoticonsHtml;

        emoticonsHtml = '<div style="padding: 5px"><table role="presentation" class="taging">';
        var result = [];

        tinymce.each(tags, function (icon) {
            if ($.inArray(icon, availableTags) > -1) {
                result.push('<td style="padding: 3px 2px"><a href="#" style="padding: 1px 4px" class="label label-info" data-mce-tag="[' + icon + ']" tabindex="-1">' + icon + '</a></td>');
            }
        });

        var middleHtml = [];
        for (var i = 0; i < result.length; i += 2) {
            middleHtml.push(result.slice(i, i + 2).join(''));
        }

        emoticonsHtml += '<tr>' + middleHtml.join('</tr><tr>') + '</tr></table></div>';

        return emoticonsHtml;
    }

    function addHighlights(content) {
        tinymce.each(tags, function (tag) {
            if ($.inArray(tag, availableTags) > -1) {
                var src = url + '/img/' + tag.replace(/ /g, '_').toLowerCase() + '.png';
                content = content.replace(new RegExp('\\[' + tag + '\\]', 'g'), '<img class="taging" src="' + src + '" alt="' + tag + '">');
            }
        });
        return content;
    }

    function preFormat(content) {
        var str = content.split("\n");
        var result = '';
        tinymce.each(str, function (val) {
            if (tinymce.trim(val) === '')
                val = '<br data-mce-bogus="1">';
            result += '<p>' + val + '</p>';
        });
        return result.replace(/&nbsp;/g, '');
    }

    function strip_tags(html) {
        if (arguments.length < 3) {
            html = html.replace(/<\/?(?!\!)[^>]*>/gi, '');
        } else {
            var allowed = arguments[1];
            var specified = eval("[" + arguments[2] + "]");
            if (allowed) {
                var regex = '</?(?!(' + specified.join('|') + '))\b[^>]*>';
                html = html.replace(new RegExp(regex, 'gi'), '');
            } else {
                var regex = '</?(' + specified.join('|') + ')\b[^>]*>';
                html = html.replace(new RegExp(regex, 'gi'), '');
            }
        }
        return html;
    }

    function tinymceToText(str) {
        return strip_tags(str.replace(/<img[^>]+alt="([^"]+)"[^>]*>/g, "[$1]")); // .replace(/&nbsp;/g, '')
    }

    editor.addButton('taging', {
        type: 'panelbutton',
        popoverAlign: 'bc-tl',
        panel: {
            autohide: true,
            html: getHtml,
            onclick: function (e) {
                var linkElm = editor.dom.getParent(e.target, 'a');
                if (linkElm) {
                    var tag = linkElm.getAttribute("data-mce-tag");
                    var src = url + '/img/' + tag.replace('[', '').replace(']', '').replace(/ /g, '_') + '.png';
                    editor.insertContent('<img class="taging" src="' + src + '" alt="' + tag.replace('[', '').replace(']', '') + '">');
                    this.hide();
                }
            }
        },
        tooltip: 'Available tags',
        image: url + '/img/tag.png'
    });

    editor.on('init', function () {
        var dom = editor.dom;
        dom.loadCSS(url + '/style.min.css');
        editor.setContent(addHighlights(preFormat(editor.getElement().value)));
        editor.on("change setcontent paste keyup mouseup nodechange", function () {
            editor.getElement().innerHTML = tinymceToText(editor.getContent());
        });
    });

    editor.on('keyup', function (evt) {
        var content = editor.getContent();
        var newContent = addHighlights(content);

        if (content !== newContent) {
            editor.insertContent('<span id="bookmark"></span>');
            editor.setContent(addHighlights(editor.getContent()).replace(/&nbsp;/g, ''));
            var bookmark = editor.dom.doc.getElementById('bookmark');
            editor.selection.select(bookmark);
            bookmark.parentNode.removeChild(bookmark);
        }
    });

    editor.setFormattedContent = function (content) {
        editor.getElement().innerHTML = content;
        editor.setContent(addHighlights(preFormat(content)));
    };

});
